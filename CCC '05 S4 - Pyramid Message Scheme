import java.util.*;
import java.io.*;
public class CCC05S4 {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	
	public static int longestPath(Map<String, Set<String>> graph, String start) {
		int longestPath = 0;
		Set<String> visted = new HashSet<>();
		longestPath = dfs(graph, start, 0, visted);
		
		return longestPath;
	}
	
	public static int dfs(Map<String, Set<String>> graph, String vertex, int lengthPath, Set<String> visited) {
		visited.add(vertex);
		int maxPath = lengthPath;
		
		for (String neighbor : graph.get(vertex)) {
			if (!visited.contains(neighbor)) {
				maxPath = Math.max(maxPath, dfs(graph, neighbor, lengthPath + 1, visited));
			}
		}
		
		visited.remove(vertex);
		return maxPath;
	}
	
	public static Map<String, Set<String>> buildGraph(String[] input) {
        Map<String, Set<String>> graph = new HashMap<>();

        for (int i = 0; i < input.length; i += 2) {
            String name1 = input[i];
            String name2 = input[i+1];

            if (!graph.containsKey(name1)) {
                graph.put(name1, new HashSet<>());
            }

            if (!graph.containsKey(name2)) {
                graph.put(name2, new HashSet<>());
            }

            graph.get(name1).add(name2);
            graph.get(name2).add(name1);
        }

        return graph;

	}
	public static void main(String[] args) throws IOException{
		int L = Integer.parseInt(br.readLine());
		
		for (int i = 0; i < L; i++) {
			int N = Integer.parseInt(br.readLine());
			String[] arr = new String[N];
			for (int j = 0; j < N; j++) {
				arr[j] = br.readLine();
			}
			String start = arr[arr.length - 1];
			Map<String, Set<String>> graph = buildGraph(arr);
			
			int max = longestPath(graph, start);
			System.out.println(N*10 - max*20);
		}
		
		
		
	}
}
